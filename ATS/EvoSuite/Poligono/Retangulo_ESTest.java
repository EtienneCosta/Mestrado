/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 13 20:54:05 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Retangulo_ESTest extends Retangulo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Ponto ponto0 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(ponto0).distancia(any(Ponto.class));
      Ponto ponto1 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto0, ponto0, ponto0).when(ponto1).clone();
      Ponto ponto2 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto3 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto2, ponto2).when(ponto3).clone();
      Ponto ponto4 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto1, ponto1, ponto3, ponto3, ponto1).when(ponto4).clone();
      Ponto ponto5 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto4, ponto4, ponto4, ponto4, ponto4).when(ponto5).clone();
      Retangulo retangulo0 = new Retangulo(ponto5, ponto5, ponto5, ponto5);
      double double0 = retangulo0.areaQuadrado();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Retangulo retangulo0 = new Retangulo();
      Ponto ponto0 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(ponto0).distancia(any(Ponto.class));
      Ponto ponto1 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto0).when(ponto1).clone();
      Ponto ponto2 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto1).when(ponto2).clone();
      retangulo0.addPonto(ponto2);
      Ponto ponto3 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto4 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto3).when(ponto4).clone();
      Ponto ponto5 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto4).when(ponto5).clone();
      retangulo0.addPonto(ponto5);
      // Undeclared exception!
      try { 
        retangulo0.areaQuadrado();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Ponto ponto0 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn((-954.0), (-954.0)).when(ponto0).distancia(any(Ponto.class));
      Ponto ponto1 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto2 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto0, ponto0, ponto0, ponto1, ponto0).when(ponto2).clone();
      Ponto ponto3 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto2, ponto2, ponto2, ponto2, ponto2).when(ponto3).clone();
      Ponto ponto4 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto3, ponto3, ponto3, ponto3, ponto3).when(ponto4).clone();
      Retangulo retangulo0 = new Retangulo(ponto4, ponto4, ponto4, ponto4);
      double double0 = retangulo0.areaQuadrado();
      assertEquals(910116.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Retangulo retangulo0 = new Retangulo();
      Ponto ponto0 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn((Ponto) null).when(ponto0).clone();
      retangulo0.addPonto(ponto0);
      // Undeclared exception!
      try { 
        retangulo0.areaQuadrado();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Poligono", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Ponto ponto0 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn((Ponto) null, (Ponto) null, (Ponto) null, (Ponto) null).when(ponto0).clone();
      Ponto ponto1 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn((Ponto) null).when(ponto1).clone();
      Retangulo retangulo0 = null;
      try {
        retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Poligono", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Ponto ponto0 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto1 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto0, ponto0, ponto0, ponto0, ponto0).when(ponto1).clone();
      Ponto ponto2 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto1, ponto1, ponto1, ponto1, ponto1).when(ponto2).clone();
      Retangulo retangulo0 = new Retangulo(ponto2, ponto2, ponto2, ponto2);
      Retangulo retangulo1 = retangulo0.clone();
      assertNotSame(retangulo0, retangulo1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Ponto ponto0 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 422.3757156).when(ponto0).distancia(any(Ponto.class));
      Ponto ponto1 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto2 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto0, ponto0, ponto0, ponto1, ponto0).when(ponto2).clone();
      Ponto ponto3 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto2, ponto2, ponto2, ponto2, ponto2).when(ponto3).clone();
      Ponto ponto4 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto3, ponto3, ponto3, ponto3, ponto3).when(ponto4).clone();
      Retangulo retangulo0 = new Retangulo(ponto4, ponto4, ponto4, ponto4);
      double double0 = retangulo0.areaQuadrado();
      assertEquals((-422.3757156), double0, 0.01);
  }
}
