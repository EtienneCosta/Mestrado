/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 13 20:52:18 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Triangulo_ESTest extends Triangulo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Ponto ponto0 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(3779.338).when(ponto0).distancia(any(Ponto.class));
      Ponto ponto1 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto2 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(ponto2).distancia(any(Ponto.class));
      Ponto ponto3 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto4 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto0, ponto1, ponto1, ponto2, ponto3).when(ponto4).clone();
      Ponto ponto5 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto4).when(ponto5).clone();
      Ponto ponto6 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(3779.338).when(ponto6).distancia(any(Ponto.class));
      Ponto ponto7 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn((-1061.40594656477), 3779.338, 3779.338).when(ponto7).distancia(any(Ponto.class));
      Ponto ponto8 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto6, ponto6, ponto6, ponto7, ponto7).when(ponto8).clone();
      Ponto ponto9 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto10 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto11 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto9, ponto9, ponto9, ponto10, ponto10).when(ponto11).clone();
      Ponto ponto12 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto8, ponto8, ponto11).when(ponto12).clone();
      Ponto ponto13 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto5, ponto12, ponto12, ponto12).when(ponto13).clone();
      Triangulo triangulo0 = new Triangulo(ponto13, ponto13, ponto13);
      double double0 = triangulo0.areaTriangulo();
      assertEquals(1985832.8082142693, double0, 0.01);
      
      double double1 = triangulo0.areaTriangulo();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Ponto ponto0 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(ponto0).distancia(any(Ponto.class));
      Ponto ponto1 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto2 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto0, ponto1, ponto1, (Ponto) null, (Ponto) null).when(ponto2).clone();
      Ponto ponto3 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto2).when(ponto3).clone();
      Ponto ponto4 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(ponto4).distancia(any(Ponto.class));
      Ponto ponto5 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto4, ponto4, ponto4, ponto4, ponto4).when(ponto5).clone();
      Ponto ponto6 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      Ponto ponto7 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto6, ponto6, ponto6, (Ponto) null, (Ponto) null).when(ponto7).clone();
      Ponto ponto8 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto5, ponto5, ponto7).when(ponto8).clone();
      Ponto ponto9 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn(ponto3, ponto8, ponto8, ponto8).when(ponto9).clone();
      Triangulo triangulo0 = new Triangulo(ponto9, ponto9, ponto9);
      triangulo0.areaTriangulo();
      // Undeclared exception!
      try { 
        triangulo0.areaTriangulo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Triangulo", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Triangulo triangulo0 = new Triangulo();
      // Undeclared exception!
      try { 
        triangulo0.areaTriangulo();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Ponto ponto0 = mock(Ponto.class, new ViolatedAssumptionAnswer());
      doReturn((Ponto) null).when(ponto0).clone();
      Triangulo triangulo0 = null;
      try {
        triangulo0 = new Triangulo(ponto0, ponto0, ponto0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Poligono", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Triangulo triangulo0 = new Triangulo();
      Triangulo triangulo1 = triangulo0.clone();
      assertNotSame(triangulo0, triangulo1);
  }
}
