open util/ordering[Clock] as C
open util/ordering[Process] as P


/** --------------------------------------------------------------------------
|  Lamport's Logical Clocks                                                            
------------------------------------------------------------------------------- */

sig Clock{}

/** ----------------------------------------------------------------------------	 
|-> Processes 									       	 
|	Fixed collection of processes which share a single resource 	 
|       											 
|	<$> clock : each process as its own logical clock		 
|	<$> requests : set of sent and delivered requests			 
| 	<$> acks :  acknowledgements received by 			 
| ---------------------------------------------------------------------------- */

sig Process{
	var clock : one Clock,
	var requests: set Req, 
	var acks : set Process
}

/** ------------------------------------------------------------------------------- 
|-> Critical Section 								         
|	Set of processes in the critical section					    
|       											    
|	<$> process : each process as its own logical clock	        	    
| ------------------------------------------------------------------------------- */

one sig CriticalSection{
	var critical: lone Process
}

/** ------------------------------------------------------------------------------- 
|-> Message 									       	    
|	Messages sent between processes, it can be Request,                 
|    Acknowloedgement or Release                                         	    
|       											    
|	<$> from : message sender		 		            
|	<$> to : message receiver 					    
| 	<$> timeStamp : Process clock at the time of message creation 
| ------------------------------------------------------------------------------- */

var abstract sig Message{
	var from: one Process,
	var timeStamp: one Clock
}

var sig Req, Ack, Rel extends Message {}

/** ----------------------------------------------------------------------------	 
|-> Network 									       	 
|	Stores messages that were sent but not yet delivered     	 
|       											 
|	<$> inbox : for each tuple of processes exists one queue	 
| ---------------------------------------------------------------------------- */

one sig Network{
	inbox: Process -> Process -> Queue
}

/** ----------------------------------------------------------------------------	 
|-> Queue 									       	         
|	Used to store messages in the Network  	                         
|       											 
|	<$> messages : messages sent by one process to another	 
| ---------------------------------------------------------------------------- */

sig Queue{
	var messages: seq Message
}

/** --- Functions ----------------------------------------------------------- */

// Returns the network queue of two processes, similar to network[p][q]
fun box[p, q : Process]: Queue {
	q.(p.(Network.inbox))
}

// returns the set os messages that are on the network queue
// messages in queue have green color in the visualizer
fun requestsQueue[]: set Message{
	Queue.messages.elems
}

fun acksNotInQueue[]: set Ack{
	Ack - Queue.messages.elems
}

/** --- Asserts  ----------------------------------------------------------- */


/** --- Facts & Preds ------------------------------------------------------- */

fact Init{
	/* --- Process --- */
	/* all processes have one initial request */
	all p : Process | one p.requests 
	/* there is an initial process who as permission to enter the critical section */
	all p : Process | p.requests.from = P/first and p.requests.timeStamp = C/first
	all p : Process | p.clock = first.next
	/* each process has its own initial request, this is, 'requests' is an injective relation */
	requests.~requests in iden  
	/* there no acks */
	no acks
	/* --- Critical Section --- */
	/* initially there are no processes in the critical section */
	no critical
	/* --- Messages --- */
	/* The number of requests is equal to the number of processes */
	#Req = #Process
	/* There are no ack and no rel messages */
	no Ack + Rel
	/* --- Network --- */
	/* There is not queue in the network which the sender and the receiver is the same process */
	no Network.inbox.Queue & iden  // irreflexive 
	all disj p, p1 : Process | {
		/* There is exactly one box for each pair of processes */
		one box[p,p1]
		/* The queues are empty */
		box[p,p1].messages.isEmpty
		/* Each pair of processes have their own queue */
		all disj p2, p3 : Process |  box[p, p1] = box[p2, p3] implies p = p2 and p1 = p3
	}
	/* The number of queues is exactly the one that is needed to assure comunication between two processes, this is 
	     there are not unused queues */
	Queue in Process.(Process.(Network.inbox))
}

pred nop {
	/* Process */
	clock' = clock
	requests' = requests
	acks' = acks
	/* CriticalSection */
	critical' = critical
	/* Message */
	Message' = Message 
	Req' = Req 
	Ack' = Ack
	Rel' = Rel
	from' = from
	timeStamp' = timeStamp
	/* Network*/
//	inbox' = inbox
	Queue' = Queue
	messages' = messages
}

fact progress {
	always (nop or some p : Process | request[p] or some q : Process | receiveRequest[p,q] or receiveAck[p,q])
}

fact staticInbox {}
/** ---------------------------------------------------------------------------- 
	beats(p,q) is true if process p believes that its request has higher    
	priority than q's request. This is true if either p has not received a  
	request from q or p's request has a smaller clock value than q's.       
	If there is a tie, the numerical process ID decides.  
                  
	beats(p,q) ==
	  \/ req[p][q] = 0
	  \/ req[p][p] < req[p][q]
	  \/ req[p][p] = req[p][q] /\ p < q
--------------------------------------------------------------------------------- **/
pred beats{

}

/** ------------------------------------------------------------------------------|
	|-> Broadcasts messsage m to every process
------------------------------------------------------------------------------- **/
pred broadcast(s : Process, m : Message){
	all r  : Process - s | box[s,r].messages' = box[s,r].messages.add[m]
	all disj p,q : Process | p != s => box[p,q].messages' = box[p,q].messages
}

/** ------------------------------------------------------------------------------|
	|-> Process p requests access to critical section.                   
 ------------------------------------------------------------------------------ **/
pred request[p: Process]{
	one disj m,m1 : Req' | {
		/* create message */
		m + m1 not in Message
		Message' = Message + m + m1
		m.from' = p and m1.from' = p
		m.timeStamp' = p.clock and m1.timeStamp' = p.clock
		/* places request in request[p], all other requests remain the same */
		m in p.requests' && m not in p.requests
		requests' - p->m = requests
		/* Messages remain the same */
		Message' - m - m1 = Message
		(Message' - m - m1).from' = Message.from
		(Message' - m - m1).timeStamp' = Message.timeStamp
		/* broadcasts message to all other processes */
		broadcast[p,m1]
	}
	/* sends an ack to itself */
	p.acks' = p.acks + p
	acks' - p->p = acks
	/* unchanged */
	clock' = clock
	critical' = critical
	Ack' = Ack
	Rel' = Rel
//	inbox' = inbox
}

/** --------------------------------------------------------------------------|
	|-> Process p receives a request from q and acknowledges it.        
 --------------------------------------------------------------------------- **/
pred receiveRequest(p,q : Process){
	/* there must be a request to receive */
	not box[q,p].messages.isEmpty
	let m = box[q,p].messages.first, c = m.timeStamp | {
		/* Message creation */
		m in Req
		p.requests' = p.requests + m
		requests' - p->m = requests
		/* Lamports' clock implementation rule IRII(b) from his papper */
		gt[c, p.clock] => p.clock' = c.next else p.clock' = (p.clock).next 
		(Process - p).clock' = (Process - p).clock
		/* remove the head of p->q queue */
		box[q,p].messages' = box[q,p].messages.rest
	}
	/* sends ack message */
	one m : Ack' | {
		/* Message creation with no time stamp */
		m not in Message
		Message' = Message +m
		m.from' = p
		m.timeStamp' = p.clock
		/* Messages remain the same */
		Message' - m = Message
		(Message' - m).from' = Message.from
		(Message' - m).timeStamp' = Message.timeStamp
		box[p,q].messages' = box[p,q].messages.add[m]
	}
	/* all queues except p->q & q->p remains the same */
	let b = Network.inbox - p->q->Queue - q -> p -> Queue | b.messages' = b.messages
	/* unchanged */
	acks' = acks
	critical' = critical 
	Rel' = Rel
//	inbox' = inbox
}

/** ------------------------------------------------------------------------------------------
	Process p receives an acknowledgement from q.       

		ReceiveAck(p,q) ==
		  /\ network[q][p] # << >>
		  /\ LET m == Head(network[q][p])
		     IN  /\ m.type = "ack"
		         /\ ack' = [ack EXCEPT ![p] = @ \union {q}]
		         /\ network' = [network EXCEPT ![q][p] = Tail(@)]
		         /\ UNCHANGED <<clock, req, crit>>
               
 ---------------------------------------------------------------------------------------------- **/
pred receiveAck(p,q : Process){
	not box[q,p].messages.isEmpty
	let m = box[q,p].messages.first | {
		m in Ack
		acks' = acks + p->q
		box[q,p].messages' = box[q,p].messages.rest
		let b = Network.inbox - q -> p -> Queue | b.messages' = b.messages
	}
	/* unchanged */
	clock' = clock
	requests' = requests
	critical' = critical
	Message' = Message
	from' = from
	timeStamp' = timeStamp
	Req' = Req
	Rel' = Rel
	Ack' = Ack
}

/** ------------------------------------------------------------------------------------------
	Process p enters the critical section.  

		Enter(p) == 
  /\ ack[p] = Proc
  /\ \A q \in Proc \ {p} : beats(p,q)
  /\ crit' = crit \union {p}
  /\ UNCHANGED <<clock, req, ack, network>>
               
 ---------------------------------------------------------------------------------------------- **/
pred enter(p : Process){
	
}

/** ------------------------------------------------------------------------------------------
	Process p exits the critical section and notifies other processes.

		Exit(p) ==
  /\ p \in crit
  /\ crit' = crit \ {p}
  /\ network' = [network EXCEPT ![p] = Broadcast(p, RelMessage)]
  /\ req' = [req EXCEPT ![p][p] = 0]
  /\ ack' = [ack EXCEPT ![p] = {}]
  /\ UNCHANGED clock
 
               
 ---------------------------------------------------------------------------------------------- **/
pred exit(p : Process){

}

/** ------------------------------------------------------------------------------------------
	Process p receives a release notification from q. 
		ReceiveRelease(p,q) ==
  /\ network[q][p] # << >>
  /\ LET m == Head(network[q][p])
     IN  /\ m.type = "rel"
         /\ req' = [req EXCEPT ![p][q] = 0]
         /\ network' = [network EXCEPT ![q][p] = Tail(@)]
         /\ UNCHANGED <<clock, ack, crit>>

 
               
 ---------------------------------------------------------------------------------------------- **/
pred receiveRelease(p,q : Process){

}

/** ------------------------------------------------------------------------------------------
	Next ==
  		\/ \E p \in Proc : Request(p) \/ Enter(p) \/ Exit(p)
  		\/ \E p \in Proc : \E q \in Proc \ {p} : 
        		ReceiveRequest(p,q) \/ ReceiveAck(p,q) \/ ReceiveRelease(p,q)

	vars == <<req, network, clock, ack, crit>>

	Spec == Init /\ [][Next]_vars
 ---------------------------------------------------------------------------------------------- **/

run {
	eventually some p : Process | Process = p.acks
	
} for 10 but exactly 3 Process
