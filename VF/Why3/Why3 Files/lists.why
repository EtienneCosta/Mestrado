
theory Lists

  use list.List
  use list.Mem
  use int.Int
  

  function (++) (l1 l2: list 'a) : list 'a =
  match l1 with
    | Nil -> l2
    | Cons x1 r1 -> Cons x1 (r1 ++ l2)
  end

 lemma app_nil:
    forall l :list 'a. l++Nil = l

  function length (l : list 'a) : int =
  match l with
    | Nil -> 0
    | Cons _ t -> 1 + length t
  end


lemma aux_length:
  forall x: 'a, l :list 'a. length (Cons x l) = 1 + (length l)

lemma app_length:
  forall l1 l2: list 'a. length (l1++l2) = length l1 + length l2


  function snoc (x:'a) (l:list 'a) : list 'a =
  match l with 
  | Nil -> Cons x Nil 
  | Cons h t -> Cons h (snoc x t)
  end


  lemma snoc_len : 
    forall x:'a,  l:list 'a. length (snoc x l) = 1 + (length l)

  lemma snoc_app : 
    forall x:'a,  l:list 'a.  snoc x l =  l ++ (Cons x Nil)

  
  lemma mem_app:
    forall x:'a, l1 l2 :list 'a. mem x (l1 ++ l2) -> mem x l1 \/ mem x l2 

end

